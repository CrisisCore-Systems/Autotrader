name: tests-and-coverage

on:
  push:
    branches: [main]
  pull_request:

# Cancel in-progress runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.1.1
      - uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c  # v4.9.1
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests with coverage
        run: pytest --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80
        
      - name: Coverage threshold gate
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().attrib['line-rate'])")
          COVERAGE_PCT=$(python -c "print(int(float($COVERAGE) * 100))")
          echo "Coverage: ${COVERAGE_PCT}%"
          if [ "$COVERAGE_PCT" -lt 80 ]; then
            echo "::error::Coverage ${COVERAGE_PCT}% is below threshold of 80%"
            exit 1
          fi
      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4  # v5.0.0
        with:
          name: coverage-xml
          path: coverage.xml

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.1.1
      - uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c  # v4.9.1
        with:
          python-version: '3.11'
      
      - name: Install linting tools
        run: |
          pip install ruff mypy pylint
          pip install -r requirements.txt
      
      - name: Run ruff linting
        run: ruff check src/ --output-format=github
      
      - name: Run mypy type checking
        run: mypy src/ --strict --ignore-missing-imports
      
      - name: Run pylint
        run: pylint src/ --fail-under=8.0 --output-format=colorized

  llm-validation-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.1.1
      - uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c  # v4.9.1
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema
      
      - name: Check LLM validation coverage
        run: python scripts/validation/check_llm_validation_coverage.py
      
      - name: Validate prompt output fixtures
        run: python scripts/validation/validate_prompt_outputs.py

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, lint, llm-validation-coverage]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.llm-validation-coverage.result }}" != "success" ]; then
            echo "❌ Quality gate failed"
            echo "Test result: ${{ needs.test.result }}"
            echo "Lint result: ${{ needs.lint.result }}"
            echo "LLM validation coverage result: ${{ needs.llm-validation-coverage.result }}"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi

