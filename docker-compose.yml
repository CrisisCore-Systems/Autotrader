version: "3.9"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    env_file:
      - .env
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  metrics:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.services.metrics_server --port 9091 --address 0.0.0.0
    env_file:
      - .env
    depends_on:
      - app
    ports:
      - "9091:9091"

  backtest:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python scripts/validation/snapshot_config.py
      --agents-config configs/agents.yaml
      --training-config configs/training/strategy.yaml
      --feature-catalog FEATURE_CATALOG.md
      --output backtest_results/config_snapshot.json
      --dvc-metrics backtest_results/metrics.json &&
      python backtest/harness.py data/features/EURUSD_20241018_ml_ready.parquet
      --extended-metrics
      --top-k 10
      --json-output backtest_results/backtest_results.json"
    env_file:
      - .env
    volumes:
      - ./data:/app/data:ro
      - ./backtest_results:/app/backtest_results
    depends_on:
      - app
    profiles:
      - validation

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.1
    command: >-
      mlflow server
      --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --default-artifact-root s3://${MLFLOW_S3_BUCKET}
      --host 0.0.0.0
      --port 5000
    env_file:
      - .env
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - postgres
      - minio
    ports:
      - "5000:5000"

  prefect:
    image: prefecthq/prefect:2.19-python3.11
    command: prefect server start --host 0.0.0.0 --port 4200
    environment:
      PREFECT_API_URL: http://prefect:4200/api
    ports:
      - "4200:4200"

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    command: redis-server --save "" --appendonly no
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  kafka:
    image: bitnami/kafka:3.7
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka

  minio:
    image: quay.io/minio/minio:RELEASE.2024-05-10T01-41-38Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"

  prometheus:
    image: prom/prometheus:v2.53.0
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  minio_data:
  prometheus_data:
  grafana_data:
  backtest_results:
