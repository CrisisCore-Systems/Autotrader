version: "3.9"

services:
  api:
    build:
      context: ../
      dockerfile: Dockerfile
    image: autotrader-api:latest
    command: uvicorn src.services.exporter:app --host 0.0.0.0 --port 8000
    env_file:
      - ../.env
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
      - ENABLE_METRICS=true
    depends_on:
      postgres:
        condition: service_healthy
      vector:
        condition: service_started
    ports:
      - "8000:8000"
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Volumes for writable paths only
    volumes:
      - api-tmp:/tmp
      - api-logs:/app/logs
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net

  worker:
    build:
      context: ../
      dockerfile: Dockerfile
    image: autotrader-worker:latest
    # TODO: Create src/core/worker.py or replace with actual worker entrypoint
    command: python -m src.cli.main --help  # Placeholder until worker module is implemented
    env_file:
      - ../.env
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
      - ENABLE_METRICS=true
    depends_on:
      postgres:
        condition: service_healthy
      vector:
        condition: service_started
    restart: unless-stopped
    
    # Expose metrics endpoint
    ports:
      - "9100:9100"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Health check (assumes worker exposes metrics endpoint)
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    # Volumes for writable paths
    volumes:
      - worker-tmp:/tmp
      - worker-logs:/app/logs
      - worker-cache:/app/.cache
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net

  postgres:
    image: timescale/timescaledb:2.13.0-pg15  # Pinned version
    environment:
      POSTGRES_USER: crisiscore
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crisiscore}
      POSTGRES_DB: autotrader
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Persistent storage
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crisiscore -d autotrader"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Shared memory for PostgreSQL
    shm_size: 256mb
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net

  vector:
    image: milvusdb/milvus:v2.3.8  # Pinned version (not :latest)
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      ETCD_USE_EMBED: "true"
      MINIO_USE_EMBED: "true"
      COMMON_STORAGETYPE: local
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Persistent storage for Milvus
    volumes:
      - milvus-data:/var/lib/milvus
      - milvus-etcd:/etcd
      - milvus-minio:/minio
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1  # Pinned version
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net
    
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3  # Pinned version
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: ""
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net
    
    profiles:
      - monitoring

  # Metrics exporter for core services
  metrics-exporter:
    build:
      context: ../
      dockerfile: Dockerfile
    image: autotrader-metrics:latest
    command: python -m src.services.metrics_server --port 9200
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
      - METRICS_PORT=9200
    ports:
      - "9200:9200"
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    security_opt:
      - no-new-privileges:true
    
    volumes:
      - metrics-tmp:/tmp
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net
    
    profiles:
      - monitoring

  # PostgreSQL metrics exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://crisiscore:${POSTGRES_PASSWORD:-crisiscore}@postgres:5432/autotrader?sslmode=disable"
    ports:
      - "9187:9187"
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    depends_on:
      postgres:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - autotrader-net
    
    profiles:
      - monitoring

# Named volumes for persistence
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  milvus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/milvus
  
  milvus-etcd:
    driver: local
  
  milvus-minio:
    driver: local
  
  prometheus-data:
    driver: local
  
  grafana-data:
    driver: local
  
  # Ephemeral volumes
  api-tmp:
  api-logs:
  worker-tmp:
  worker-logs:
  worker-cache:
  metrics-tmp:

# Network isolation
networks:
  autotrader-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
