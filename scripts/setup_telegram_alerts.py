#!/usr/bin/env python3
"""
Setup and test Telegram alert routing.

This script:
1. Helps you configure your Telegram bot
2. Tests the connection
3. Sends a test alert
4. Validates the configuration

Usage:
    python scripts/setup_telegram_alerts.py --configure
    python scripts/setup_telegram_alerts.py --test
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

import argparse
import logging
from datetime import datetime, timezone

from autotrader.alerts.router import AlertRouter, TelegramAdapter
from autotrader.alerts.config import load_alert_config, create_example_config
from autotrader.monitoring.compliance.monitor import ComplianceIssue, ComplianceSeverity

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def configure_telegram():
    """Interactive configuration for Telegram bot."""
    print("=" * 80)
    print("Telegram Bot Setup")
    print("=" * 80)
    print()
    
    print("üì± Step 1: Create a Telegram Bot")
    print("-" * 80)
    print("1. Open Telegram and search for @BotFather")
    print("2. Send the command: /newbot")
    print("3. Follow the prompts to:")
    print("   - Choose a name for your bot (e.g., 'Trading Alerts Bot')")
    print("   - Choose a username (must end in 'bot', e.g., 'mycompany_alerts_bot')")
    print("4. @BotFather will give you a bot token")
    print()
    
    bot_token = input("Enter your bot token: ").strip()
    
    if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå Invalid bot token!")
        return False
    
    print()
    print("üí¨ Step 2: Get Your Chat ID")
    print("-" * 80)
    print("1. Start a chat with your new bot (search for its username)")
    print("2. Send any message to the bot (e.g., 'Hello')")
    print("3. Visit this URL in your browser:")
    print(f"   https://api.telegram.org/bot{bot_token}/getUpdates")
    print("4. Look for 'chat':{'id': YOUR_CHAT_ID} in the response")
    print()
    print("Alternative: Use @userinfobot on Telegram to get your user ID")
    print()
    
    chat_id = input("Enter your chat ID: ").strip()
    
    if not chat_id or chat_id == "YOUR_CHAT_ID_HERE":
        print("‚ùå Invalid chat ID!")
        return False
    
    # Test connection
    print()
    print("üîó Testing connection...")
    telegram = TelegramAdapter(bot_token, chat_id)
    
    if not telegram.test_connection():
        print("‚ùå Failed to connect to Telegram bot!")
        print("Please check your bot token and try again.")
        return False
    
    print("‚úÖ Connection successful!")
    
    # Save config
    config_path = Path(__file__).parent.parent / "configs" / "alerts.yaml"
    config_path.parent.mkdir(parents=True, exist_ok=True)
    
    config_content = f"""# Alert Configuration
# Generated by setup_telegram_alerts.py on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Telegram Bot Configuration
telegram:
  enabled: true
  bot_token: "{bot_token}"
  chat_id: "{chat_id}"

# Email Configuration (Optional - configure later if needed)
email:
  enabled: false
  smtp_host: "smtp.gmail.com"
  smtp_port: 587
  from_addr: "alerts@yourcompany.com"
  to_addrs:
    - "trader@yourcompany.com"
  username: null
  password: null
  use_tls: true
"""
    
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    print()
    print("‚úÖ Configuration saved to:", config_path)
    print()
    
    # Send test message
    print("üì§ Sending test message...")
    
    test_issue = ComplianceIssue(
        timestamp=datetime.now(tz=timezone.utc),
        signal_id="test_signal_001",
        instrument="TEST",
        issue_code="SETUP_TEST",
        severity=ComplianceSeverity.INFO,
        description="Telegram alert setup completed successfully! üéâ",
        metadata={
            'setup_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'status': 'Ready to receive alerts'
        }
    )
    
    if telegram.send_alert(test_issue):
        print("‚úÖ Test message sent! Check your Telegram.")
    else:
        print("‚ùå Failed to send test message.")
        return False
    
    print()
    print("=" * 80)
    print("üéâ Setup Complete!")
    print("=" * 80)
    print()
    print("Next steps:")
    print("1. Run compliance monitoring with alerts:")
    print("   python scripts/demo_compliance_monitoring.py --send-alerts")
    print()
    print("2. Generate violations to test alerts:")
    print("   python scripts/run_compliance_test_trading.py --violations")
    print("   python scripts/demo_compliance_monitoring.py --send-alerts")
    print()
    
    return True


def test_alerts():
    """Test alert routing with sample compliance issues."""
    print("=" * 80)
    print("Testing Alert Routing")
    print("=" * 80)
    print()
    
    # Load config
    try:
        config = load_alert_config()
        
        if not config.is_configured():
            print("‚ùå No alert channels configured!")
            print("Run: python scripts/setup_telegram_alerts.py --configure")
            return False
        
    except Exception as e:
        print(f"‚ùå Failed to load config: {e}")
        return False
    
    # Create router
    telegram = None
    if config.telegram and config.telegram.enabled:
        telegram = TelegramAdapter(
            config.telegram.bot_token,
            config.telegram.chat_id
        )
        
        print("üì± Telegram bot configured")
        if not telegram.test_connection():
            print("‚ùå Telegram connection failed!")
            return False
        print("‚úÖ Telegram connection OK")
    
    router = AlertRouter(telegram=telegram)
    
    # Send test alerts
    print()
    print("üì§ Sending test alerts...")
    print()
    
    test_issues = [
        ComplianceIssue(
            timestamp=datetime.now(tz=timezone.utc),
            signal_id="test_critical_001",
            instrument="AAPL",
            issue_code="RISK_OVERRIDE",
            severity=ComplianceSeverity.CRITICAL,
            description="Risk check was overridden without proper authorization",
            metadata={
                'original_decision': 'reject',
                'override_reason': 'Manual override',
                'risk_score': 0.92
            }
        ),
        ComplianceIssue(
            timestamp=datetime.now(tz=timezone.utc),
            signal_id="test_warning_001",
            instrument="MSFT",
            issue_code="RISK_CHECK_FAILED",
            severity=ComplianceSeverity.WARNING,
            description="Risk check failed but trade was not blocked",
            metadata={
                'risk_score': 0.78,
                'threshold': 0.70,
                'checks_failed': 2
            }
        ),
        ComplianceIssue(
            timestamp=datetime.now(tz=timezone.utc),
            signal_id="test_info_001",
            instrument="GOOGL",
            issue_code="LLM_REVIEW_MISSING",
            severity=ComplianceSeverity.INFO,
            description="High-value trade executed without LLM review",
            metadata={
                'notional_value': 125000,
                'llm_required_threshold': 100000
            }
        )
    ]
    
    results = router.route_batch(test_issues)
    
    print()
    print("=" * 80)
    print("Test Results")
    print("=" * 80)
    print(f"‚úÖ Sent: {results['sent']}")
    print(f"‚ùå Failed: {results['failed']}")
    print()
    
    if results['failed'] == 0:
        print("üéâ All test alerts sent successfully!")
        print("Check your Telegram for 3 test messages:")
        print("  1. üö® CRITICAL: Risk override")
        print("  2. ‚ö†Ô∏è  WARNING: Risk check failed")
        print("  3. ‚ÑπÔ∏è  INFO: LLM review missing")
        return True
    else:
        print("‚ö†Ô∏è  Some alerts failed to send")
        return False


def show_config():
    """Display current alert configuration."""
    print("=" * 80)
    print("Current Alert Configuration")
    print("=" * 80)
    print()
    
    config_path = Path(__file__).parent.parent / "configs" / "alerts.yaml"
    
    if not config_path.exists():
        print("‚ùå No configuration file found!")
        print(f"Expected: {config_path}")
        print()
        print("Run: python scripts/setup_telegram_alerts.py --configure")
        return
    
    try:
        config = load_alert_config()
        
        if config.telegram and config.telegram.enabled:
            print("üì± Telegram Bot")
            print("-" * 80)
            print(f"Status: {'‚úÖ Enabled' if config.telegram.enabled else '‚ùå Disabled'}")
            print(f"Bot Token: {'*' * 20}{config.telegram.bot_token[-10:]}")
            print(f"Chat ID: {config.telegram.chat_id}")
            print()
        
        if config.email and config.email.enabled:
            print("üìß Email")
            print("-" * 80)
            print(f"Status: {'‚úÖ Enabled' if config.email.enabled else '‚ùå Disabled'}")
            print(f"SMTP: {config.email.smtp_host}:{config.email.smtp_port}")
            print(f"From: {config.email.from_addr}")
            print(f"To: {', '.join(config.email.to_addrs)}")
            print()
        
        if not config.is_configured():
            print("‚ö†Ô∏è  Warning: No alert channels are enabled!")
        
    except Exception as e:
        print(f"‚ùå Error loading config: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="Setup and test Telegram alert routing"
    )
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        '--configure',
        action='store_true',
        help='Interactive configuration wizard'
    )
    group.add_argument(
        '--test',
        action='store_true',
        help='Test alert routing with sample issues'
    )
    group.add_argument(
        '--show-config',
        action='store_true',
        help='Display current configuration'
    )
    
    args = parser.parse_args()
    
    if args.configure:
        success = configure_telegram()
        sys.exit(0 if success else 1)
    
    elif args.test:
        success = test_alerts()
        sys.exit(0 if success else 1)
    
    elif args.show_config:
        show_config()
        sys.exit(0)


if __name__ == '__main__':
    main()
